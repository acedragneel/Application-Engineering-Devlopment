/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.abhi.mycompany.hospitalmodel.frame;

import com.abhi.mycompany.hospitalmodel.directory.CityDirectory;
import com.abhi.mycompany.hospitalmodel.directory.CommunityDirectory;
import com.abhi.mycompany.hospitalmodel.directory.DoctorDirectory;
import com.abhi.mycompany.hospitalmodel.directory.EncounterDirectory;
import com.abhi.mycompany.hospitalmodel.directory.HospitalDirectory;
import com.abhi.mycompany.hospitalmodel.directory.HouseDirectory;
import com.abhi.mycompany.hospitalmodel.directory.PatientDirectory;
import com.abhi.mycompany.hospitalmodel.directory.PersonDirectory;
import com.abhi.mycompany.hospitalmodel.models.City;
import com.abhi.mycompany.hospitalmodel.models.Community;
import com.abhi.mycompany.hospitalmodel.models.Doctor;
import com.abhi.mycompany.hospitalmodel.models.Encounter;
import com.abhi.mycompany.hospitalmodel.models.Hospital;
import com.abhi.mycompany.hospitalmodel.models.House;
import com.abhi.mycompany.hospitalmodel.models.Patient;
import com.abhi.mycompany.hospitalmodel.models.Person;
import com.abhi.mycompany.hospitalmodel.roles.Roles;
import com.abhi.mycompany.hospitalmodel.userAccount.UserAccount;
import com.abhi.mycompany.hospitalmodel.userAccount.UserAccountDirectory;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author abhilashgp
 */
public class LoginFrame extends javax.swing.JFrame {

    /**
     * Creates new form LoginFrame
     */
    
    UserAccountDirectory userAccountDirectory;
    PersonDirectory personDirectory;
    CityDirectory cityDirectory;
    HouseDirectory houseDirectory;
    CommunityDirectory communityDirectory;
    PatientDirectory patientDirectory;
    DoctorDirectory doctorDirectory;
    HospitalDirectory hospitalDirectory;
    EncounterDirectory encounterDirectory;
    Roles roles;
    
    public LoginFrame() {
        initComponents();
        this.userAccountDirectory = new UserAccountDirectory();
        this.personDirectory = new PersonDirectory();
        this.cityDirectory = new CityDirectory();
        this.patientDirectory = new PatientDirectory();
        this.doctorDirectory = new DoctorDirectory();
        this.communityDirectory = new CommunityDirectory();
        this.houseDirectory = new HouseDirectory();
        this.hospitalDirectory = new HospitalDirectory();
        this.encounterDirectory = new EncounterDirectory();
        this.roles = new Roles();
        populateUserTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        Parent = new javax.swing.JPanel();
        loginPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        userName = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        password = new javax.swing.JPasswordField();
        jLabel7 = new javax.swing.JLabel();
        rolesPanel = new javax.swing.JPanel();
        accounts = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        roleRegister = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        mAccounts = new javax.swing.JPanel();
        mRoles = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        mUsername = new javax.swing.JTextField();
        mPassword = new javax.swing.JPasswordField();
        jScrollPane1 = new javax.swing.JScrollPane();
        mTableDetails = new javax.swing.JTable();
        mSave = new javax.swing.JButton();
        mUpdate = new javax.swing.JButton();
        mDelete = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel23 = new javax.swing.JLabel();
        registerPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        rName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        rPersonId = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        rRoles = new javax.swing.JComboBox<>();
        jLabel12 = new javax.swing.JLabel();
        rHouse = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        rAddress = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        rZipCode = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        rStates = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        rCities = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        rUsername = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        rPassword = new javax.swing.JTextField();
        saveRegister = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        rGender = new javax.swing.JComboBox<>();
        rDob = new com.toedter.calendar.JDateChooser();
        rBack = new javax.swing.JButton();
        updateRegister = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        PatientPanel = new javax.swing.JPanel();
        jLabel25 = new javax.swing.JLabel();
        pPatientId = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        pName = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        jButton6 = new javax.swing.JButton();
        jLabel28 = new javax.swing.JLabel();
        pBloodPressure = new javax.swing.JTextField();
        pBloodType = new javax.swing.JComboBox<>();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        pGender = new javax.swing.JComboBox<>();
        jButton2 = new javax.swing.JButton();
        pView = new javax.swing.JButton();
        pUpdate = new javax.swing.JButton();
        pDob = new com.toedter.calendar.JDateChooser();
        jScrollPane7 = new javax.swing.JScrollPane();
        lDoctorsTableDetails = new javax.swing.JTable();
        jLabel60 = new javax.swing.JLabel();
        lHeartRate1 = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        lWeight1 = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        lTimeStamp1 = new javax.swing.JTextField();
        DoctorPanel = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        dName = new javax.swing.JTextField();
        jLabel35 = new javax.swing.JLabel();
        dDoctorId = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        dDepartment = new javax.swing.JTextField();
        dLPaitent = new javax.swing.JButton();
        dBack = new javax.swing.JButton();
        dView = new javax.swing.JButton();
        dUpdate = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        dHosTableDetails = new javax.swing.JTable();
        jLabel20 = new javax.swing.JLabel();
        dHospitalName = new javax.swing.JTextField();
        ViewPerson = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        pTableDetails = new javax.swing.JTable();
        viewPerson = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        deletePerson = new javax.swing.JButton();
        Hospital = new javax.swing.JPanel();
        jSplitPane3 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        hCreate = new javax.swing.JButton();
        hView = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        hosParent = new javax.swing.JPanel();
        CreateHospital = new javax.swing.JPanel();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        HospitalName = new javax.swing.JTextField();
        HospitalId = new javax.swing.JTextField();
        hSave = new javax.swing.JButton();
        jLabel55 = new javax.swing.JLabel();
        ViewHospital = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        hTableDetails = new javax.swing.JTable();
        vHospitalName = new javax.swing.JTextField();
        vHospitalId = new javax.swing.JTextField();
        hUpdate = new javax.swing.JButton();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        jButton16 = new javax.swing.JButton();
        hDelete = new javax.swing.JButton();
        jLabel39 = new javax.swing.JLabel();
        ViewDoctor = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        vDocTableDetails = new javax.swing.JTable();
        jLabel38 = new javax.swing.JLabel();
        dVName = new javax.swing.JTextField();
        jLabel40 = new javax.swing.JLabel();
        dVDoctorId = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        dVDepartment = new javax.swing.JTextField();
        dVUpdate = new javax.swing.JButton();
        dVDelete = new javax.swing.JButton();
        dVBack = new javax.swing.JButton();
        dHospitalName1 = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        dHosTableDetails1 = new javax.swing.JTable();
        ViewPatitent = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        vPatientTableDetails = new javax.swing.JTable();
        jLabel47 = new javax.swing.JLabel();
        pVBloodPressure = new javax.swing.JTextField();
        pVBloodType = new javax.swing.JComboBox<>();
        jLabel48 = new javax.swing.JLabel();
        jLabel49 = new javax.swing.JLabel();
        pVPatientId = new javax.swing.JTextField();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        pVGender = new javax.swing.JComboBox<>();
        pVName = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        pVDob = new com.toedter.calendar.JDateChooser();
        pVDelete = new javax.swing.JButton();
        pVUpdate = new javax.swing.JButton();
        pVBack = new javax.swing.JButton();
        ListOfPaitents = new javax.swing.JPanel();
        jLabel58 = new javax.swing.JLabel();
        lHeartRate = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        pUpdate1 = new javax.swing.JButton();
        lWeight = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        lPatitentTableDetails = new javax.swing.JTable();
        lTimeStamp = new javax.swing.JTextField();
        jButton8 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(900, 600));

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setPreferredSize(new java.awt.Dimension(900, 600));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Castellar", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("HOSPITAL MANAGEMENT");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(220, 220, 220)
                .addComponent(jLabel1)
                .addContainerGap(314, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        jSplitPane1.setTopComponent(jPanel1);

        Parent.setLayout(new java.awt.CardLayout());

        loginPanel.setBackground(new java.awt.Color(0, 153, 204));
        loginPanel.setMinimumSize(new java.awt.Dimension(936, 471));
        loginPanel.setPreferredSize(new java.awt.Dimension(900, 600));
        loginPanel.setLayout(null);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel3.setText("  Password:");
        loginPanel.add(jLabel3);
        jLabel3.setBounds(265, 190, 100, 25);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("UserName:");
        loginPanel.add(jLabel4);
        jLabel4.setBounds(265, 143, 100, 25);
        loginPanel.add(userName);
        userName.setBounds(400, 140, 270, 29);

        jButton4.setBackground(new java.awt.Color(153, 153, 153));
        jButton4.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton4.setText("Reset");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        loginPanel.add(jButton4);
        jButton4.setBounds(320, 240, 90, 29);

        jButton5.setBackground(new java.awt.Color(153, 153, 153));
        jButton5.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton5.setText("Login");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        loginPanel.add(jButton5);
        jButton5.setBounds(530, 240, 90, 29);

        password.setText("jPasswordField1");
        loginPanel.add(password);
        password.setBounds(400, 190, 270, 29);

        jLabel7.setIcon(new javax.swing.ImageIcon("F:\\NorthEastern Classes\\AED\\AED_Assign_101\\GowdruPalakshappa_Abhilash_002764845\\AED_Assign_102\\HospitalModel\\images\\pexels-oles-kanebckuu-127873.jpg")); // NOI18N
        jLabel7.setText("jLabel7");
        jLabel7.setPreferredSize(new java.awt.Dimension(900, 600));
        loginPanel.add(jLabel7);
        jLabel7.setBounds(0, 0, 1170, 750);

        Parent.add(loginPanel, "card2");

        rolesPanel.setBackground(new java.awt.Color(204, 0, 255));
        rolesPanel.setMinimumSize(new java.awt.Dimension(0, 0));
        rolesPanel.setPreferredSize(new java.awt.Dimension(900, 600));
        rolesPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        accounts.setBackground(new java.awt.Color(153, 153, 153));
        accounts.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        accounts.setText("Manage Accounts");
        accounts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountsActionPerformed(evt);
            }
        });
        rolesPanel.add(accounts, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 40, 170, -1));

        jButton7.setBackground(new java.awt.Color(153, 153, 153));
        jButton7.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton7.setText("Back");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        rolesPanel.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 390, -1, -1));

        roleRegister.setBackground(new java.awt.Color(153, 153, 153));
        roleRegister.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        roleRegister.setText("Register");
        roleRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roleRegisterActionPerformed(evt);
            }
        });
        rolesPanel.add(roleRegister, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 170, 30));

        jButton3.setBackground(new java.awt.Color(153, 153, 153));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton3.setText("Person");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        rolesPanel.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 140, 170, -1));

        jButton9.setBackground(new java.awt.Color(153, 153, 153));
        jButton9.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton9.setText("Community");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        rolesPanel.add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 340, 170, 30));

        jButton10.setBackground(new java.awt.Color(153, 153, 153));
        jButton10.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton10.setText("Patient");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        rolesPanel.add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 240, 170, -1));

        jButton11.setBackground(new java.awt.Color(153, 153, 153));
        jButton11.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton11.setText("Hospital");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        rolesPanel.add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 290, 170, 30));

        jButton12.setBackground(new java.awt.Color(153, 153, 153));
        jButton12.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton12.setText("Doctor");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        rolesPanel.add(jButton12, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 190, 170, -1));

        jLabel21.setIcon(new javax.swing.ImageIcon("F:\\NorthEastern Classes\\AED\\AED_Assign_101\\GowdruPalakshappa_Abhilash_002764845\\AED_Assign_102\\HospitalModel\\images\\white-wallpapers-37.jpg")); // NOI18N
        jLabel21.setPreferredSize(new java.awt.Dimension(900, 600));
        rolesPanel.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(-4, 1, 1470, 910));

        Parent.add(rolesPanel, "card3");

        mAccounts.setBackground(new java.awt.Color(204, 0, 255));
        mAccounts.setMinimumSize(new java.awt.Dimension(0, 0));
        mAccounts.setPreferredSize(new java.awt.Dimension(900, 600));
        mAccounts.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        mRoles.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Admin", "Doctor", "Patient", "Hospital", "Community" }));
        mAccounts.add(mRoles, new org.netbeans.lib.awtextra.AbsoluteConstraints(166, 59, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel2.setText("Roles:");
        mAccounts.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(88, 63, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel5.setText("  Password:");
        mAccounts.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(473, 79, -1, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel6.setText("UserName:");
        mAccounts.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(473, 32, 79, -1));
        mAccounts.add(mUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(591, 28, 201, -1));

        mPassword.setText("jPasswordField1");
        mAccounts.add(mPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(591, 75, 201, -1));

        mTableDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Role", "Username", "Password"
            }
        ));
        mTableDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mTableDetailsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(mTableDetails);

        mAccounts.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(88, 179, 792, 243));

        mSave.setBackground(new java.awt.Color(153, 153, 153));
        mSave.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        mSave.setText("Save");
        mSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mSaveActionPerformed(evt);
            }
        });
        mAccounts.add(mSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(473, 122, -1, -1));

        mUpdate.setBackground(new java.awt.Color(153, 153, 153));
        mUpdate.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        mUpdate.setText("Update");
        mUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mUpdateActionPerformed(evt);
            }
        });
        mAccounts.add(mUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(604, 122, -1, -1));

        mDelete.setBackground(new java.awt.Color(153, 153, 153));
        mDelete.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        mDelete.setText("Delete");
        mDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mDeleteActionPerformed(evt);
            }
        });
        mAccounts.add(mDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(733, 122, -1, -1));

        jButton1.setBackground(new java.awt.Color(153, 153, 153));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        mAccounts.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(421, 434, -1, -1));

        jLabel23.setIcon(new javax.swing.ImageIcon("F:\\NorthEastern Classes\\AED\\AED_Assign_101\\GowdruPalakshappa_Abhilash_002764845\\AED_Assign_102\\HospitalModel\\images\\white-wallpapers-37.jpg")); // NOI18N
        jLabel23.setPreferredSize(new java.awt.Dimension(900, 600));
        mAccounts.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(-4, 1, 1440, 870));

        Parent.add(mAccounts, "card4");

        registerPanel.setPreferredSize(new java.awt.Dimension(900, 600));
        registerPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel8.setText("Register");
        registerPanel.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(364, 27, -1, -1));

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel9.setText("Name:");
        registerPanel.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(106, 110, -1, -1));
        registerPanel.add(rName, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 106, 259, -1));

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel10.setText("Person Id:");
        registerPanel.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(82, 151, -1, -1));
        registerPanel.add(rPersonId, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 147, 259, -1));

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel11.setText("User Roles:");
        registerPanel.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 192, -1, -1));

        rRoles.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Doctor", "Patient" }));
        registerPanel.add(rRoles, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 188, -1, -1));

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel12.setText("House:");
        registerPanel.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(104, 233, -1, -1));
        registerPanel.add(rHouse, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 229, 259, -1));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel13.setText("Address:");
        registerPanel.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(91, 274, -1, -1));
        registerPanel.add(rAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 270, 259, -1));

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel14.setText("ZipCode:");
        registerPanel.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(91, 315, -1, -1));
        registerPanel.add(rZipCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 311, 259, -1));

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel15.setText("States:");
        registerPanel.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(105, 397, -1, -1));
        registerPanel.add(rStates, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 393, 259, -1));

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel16.setText("Cities:");
        registerPanel.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 438, -1, -1));
        registerPanel.add(rCities, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 434, 259, -1));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel17.setText("DOB:");
        registerPanel.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(116, 356, -1, -1));

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel18.setText("Username:");
        registerPanel.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(532, 110, -1, -1));
        registerPanel.add(rUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(625, 106, 250, -1));

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel19.setText("Password:");
        registerPanel.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(536, 151, -1, -1));
        registerPanel.add(rPassword, new org.netbeans.lib.awtextra.AbsoluteConstraints(625, 147, 250, -1));

        saveRegister.setBackground(new java.awt.Color(153, 153, 153));
        saveRegister.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        saveRegister.setText("Save");
        saveRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveRegisterActionPerformed(evt);
            }
        });
        registerPanel.add(saveRegister, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 190, -1, -1));

        jLabel22.setBackground(new java.awt.Color(255, 255, 255));
        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel22.setText("Click Here to Login");
        jLabel22.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel22MouseClicked(evt);
            }
        });
        registerPanel.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 430, -1, -1));

        jLabel31.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel31.setText("Gender:");
        registerPanel.add(jLabel31, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 181, -1, 40));

        rGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", " " }));
        registerPanel.add(rGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(380, 190, -1, -1));
        registerPanel.add(rDob, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 350, 260, -1));

        rBack.setBackground(new java.awt.Color(153, 153, 153));
        rBack.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        rBack.setText("Back");
        rBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBackActionPerformed(evt);
            }
        });
        registerPanel.add(rBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 380, -1, -1));

        updateRegister.setBackground(new java.awt.Color(153, 153, 153));
        updateRegister.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        updateRegister.setText("Update");
        updateRegister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRegisterActionPerformed(evt);
            }
        });
        registerPanel.add(updateRegister, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 190, -1, -1));

        jLabel24.setIcon(new javax.swing.ImageIcon("F:\\NorthEastern Classes\\AED\\AED_Assign_101\\GowdruPalakshappa_Abhilash_002764845\\AED_Assign_102\\HospitalModel\\images\\white-wallpapers-37.jpg")); // NOI18N
        jLabel24.setPreferredSize(new java.awt.Dimension(900, 600));
        registerPanel.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 1, 1030, 640));

        Parent.add(registerPanel, "card5");

        PatientPanel.setPreferredSize(new java.awt.Dimension(900, 600));

        jLabel25.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel25.setText("Patient");

        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel26.setText("Name:");

        jLabel27.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel27.setText("PatientId:");

        jButton6.setBackground(new java.awt.Color(153, 153, 153));
        jButton6.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton6.setText("Create Encounter");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel28.setText("DOB:");

        pBloodType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "AB", "O" }));

        jLabel29.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel29.setText("BloodType:");

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel30.setText("BloodPressure:");

        jLabel32.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel32.setText("Gender:");

        pGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female" }));

        jButton2.setBackground(new java.awt.Color(153, 153, 153));
        jButton2.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        pView.setBackground(new java.awt.Color(153, 153, 153));
        pView.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        pView.setText("View");
        pView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pViewActionPerformed(evt);
            }
        });

        pUpdate.setBackground(new java.awt.Color(153, 153, 153));
        pUpdate.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        pUpdate.setText("Update");
        pUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pUpdateActionPerformed(evt);
            }
        });

        lDoctorsTableDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Name", "Doc Id", "Department", "Hospital"
            }
        ));
        jScrollPane7.setViewportView(lDoctorsTableDetails);

        jLabel60.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel60.setText("Heart Rate:");

        lHeartRate1.setEditable(false);

        jLabel61.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel61.setText("Weight:");

        lWeight1.setEditable(false);

        jLabel56.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel56.setText("TimeStamp:");

        lTimeStamp1.setEditable(false);

        javax.swing.GroupLayout PatientPanelLayout = new javax.swing.GroupLayout(PatientPanel);
        PatientPanel.setLayout(PatientPanelLayout);
        PatientPanelLayout.setHorizontalGroup(
            PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PatientPanelLayout.createSequentialGroup()
                .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PatientPanelLayout.createSequentialGroup()
                        .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel27)
                            .addComponent(jLabel26)
                            .addComponent(jLabel28)
                            .addComponent(jLabel29)
                            .addComponent(jLabel30))
                        .addGap(18, 18, 18)
                        .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PatientPanelLayout.createSequentialGroup()
                                .addComponent(pView)
                                .addGap(37, 37, 37)
                                .addComponent(pUpdate)
                                .addGap(29, 29, 29)
                                .addComponent(jButton6)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2))
                            .addGroup(PatientPanelLayout.createSequentialGroup()
                                .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(pName, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(pDob, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(pBloodPressure)
                                        .addComponent(pPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(PatientPanelLayout.createSequentialGroup()
                                        .addComponent(pBloodType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel32)
                                        .addGap(18, 18, 18)
                                        .addComponent(pGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(74, 74, 74)
                                .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel61, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel60, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel56))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(PatientPanelLayout.createSequentialGroup()
                                        .addComponent(lTimeStamp1)
                                        .addGap(2, 2, 2))
                                    .addComponent(lHeartRate1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lWeight1, javax.swing.GroupLayout.Alignment.LEADING)))))
                    .addGroup(PatientPanelLayout.createSequentialGroup()
                        .addGap(397, 397, 397)
                        .addComponent(jLabel25))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 982, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        PatientPanelLayout.setVerticalGroup(
            PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PatientPanelLayout.createSequentialGroup()
                .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PatientPanelLayout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(PatientPanelLayout.createSequentialGroup()
                                .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel26)
                                    .addComponent(pName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(19, 19, 19)
                                .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(pPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel27)))
                            .addGroup(PatientPanelLayout.createSequentialGroup()
                                .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel60)
                                    .addComponent(lHeartRate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(19, 19, 19)
                                .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lWeight1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel61))))
                        .addGap(18, 18, 18)
                        .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel32)
                            .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(pBloodType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel29)
                                .addComponent(pGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PatientPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel56)
                            .addComponent(lTimeStamp1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel28)
                    .addGroup(PatientPanelLayout.createSequentialGroup()
                        .addComponent(pDob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pView)
                            .addGroup(PatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(pUpdate)
                                .addComponent(jButton6)
                                .addComponent(jButton2)))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );

        Parent.add(PatientPanel, "card7");

        DoctorPanel.setPreferredSize(new java.awt.Dimension(900, 600));

        jLabel33.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel33.setText("Doctor");

        jLabel34.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel34.setText("Name:");

        jLabel35.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel35.setText("DocId:");

        jLabel36.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel36.setText("Department:");

        dLPaitent.setBackground(new java.awt.Color(153, 153, 153));
        dLPaitent.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        dLPaitent.setText("List Of Paitents");
        dLPaitent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dLPaitentActionPerformed(evt);
            }
        });

        dBack.setBackground(new java.awt.Color(153, 153, 153));
        dBack.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        dBack.setText("Back");
        dBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dBackActionPerformed(evt);
            }
        });

        dView.setBackground(new java.awt.Color(153, 153, 153));
        dView.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        dView.setText("View");
        dView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dViewActionPerformed(evt);
            }
        });

        dUpdate.setBackground(new java.awt.Color(153, 153, 153));
        dUpdate.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        dUpdate.setText("Update");
        dUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dUpdateActionPerformed(evt);
            }
        });

        dHosTableDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Hospital Name", "Hosptial ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane9.setViewportView(dHosTableDetails);

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel20.setText("Hospital Name:");

        dHospitalName.setEditable(false);

        javax.swing.GroupLayout DoctorPanelLayout = new javax.swing.GroupLayout(DoctorPanel);
        DoctorPanel.setLayout(DoctorPanelLayout);
        DoctorPanelLayout.setHorizontalGroup(
            DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DoctorPanelLayout.createSequentialGroup()
                .addGroup(DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DoctorPanelLayout.createSequentialGroup()
                        .addGap(425, 425, 425)
                        .addComponent(jLabel33)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(DoctorPanelLayout.createSequentialGroup()
                        .addGroup(DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, DoctorPanelLayout.createSequentialGroup()
                                    .addGap(121, 121, 121)
                                    .addGroup(DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(DoctorPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel35)
                                            .addGap(18, 18, 18)
                                            .addComponent(dDoctorId))
                                        .addGroup(DoctorPanelLayout.createSequentialGroup()
                                            .addComponent(jLabel34)
                                            .addGap(18, 18, 18)
                                            .addComponent(dName, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(DoctorPanelLayout.createSequentialGroup()
                                    .addContainerGap()
                                    .addGroup(DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel20)
                                        .addComponent(jLabel36))
                                    .addGap(18, 18, 18)
                                    .addGroup(DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(dView)
                                        .addGroup(DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(dDepartment, javax.swing.GroupLayout.DEFAULT_SIZE, 260, Short.MAX_VALUE)
                                            .addComponent(dHospitalName)))))
                            .addGroup(DoctorPanelLayout.createSequentialGroup()
                                .addGap(118, 118, 118)
                                .addGroup(DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DoctorPanelLayout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(dUpdate))
                                    .addGroup(DoctorPanelLayout.createSequentialGroup()
                                        .addComponent(dLPaitent)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(dBack)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 215, Short.MAX_VALUE)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        DoctorPanelLayout.setVerticalGroup(
            DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DoctorPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel33)
                .addGroup(DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(DoctorPanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel34)
                            .addComponent(dName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel35)
                            .addComponent(dDoctorId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel36)
                            .addComponent(dDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(dHospitalName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dView)
                            .addComponent(dUpdate)))
                    .addGroup(DoctorPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32)
                .addGroup(DoctorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dLPaitent)
                    .addComponent(dBack))
                .addContainerGap(245, Short.MAX_VALUE))
        );

        Parent.add(DoctorPanel, "card7");

        ViewPerson.setPreferredSize(new java.awt.Dimension(900, 600));

        pTableDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "PersonId", "UserRoles", "Gender", "House", "Address", "ZipCode", "DOB", "States", "City", "UserName", "Password"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(pTableDetails);

        viewPerson.setBackground(new java.awt.Color(153, 153, 153));
        viewPerson.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        viewPerson.setText("View");
        viewPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPersonActionPerformed(evt);
            }
        });

        jButton14.setBackground(new java.awt.Color(153, 153, 153));
        jButton14.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton14.setText("Back");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        deletePerson.setBackground(new java.awt.Color(153, 153, 153));
        deletePerson.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        deletePerson.setText("Delete");
        deletePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePersonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ViewPersonLayout = new javax.swing.GroupLayout(ViewPerson);
        ViewPerson.setLayout(ViewPersonLayout);
        ViewPersonLayout.setHorizontalGroup(
            ViewPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewPersonLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(ViewPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(ViewPersonLayout.createSequentialGroup()
                        .addComponent(viewPerson)
                        .addGap(48, 48, 48)
                        .addComponent(deletePerson)
                        .addGap(53, 53, 53)
                        .addComponent(jButton14))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 940, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28))
        );
        ViewPersonLayout.setVerticalGroup(
            ViewPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewPersonLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(ViewPersonLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewPerson)
                    .addComponent(jButton14)
                    .addComponent(deletePerson))
                .addContainerGap(123, Short.MAX_VALUE))
        );

        Parent.add(ViewPerson, "card8");

        Hospital.setPreferredSize(new java.awt.Dimension(900, 600));

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jLabel41.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel41.setText("Hospital");

        hCreate.setBackground(new java.awt.Color(153, 153, 153));
        hCreate.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        hCreate.setText("Create");
        hCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hCreateActionPerformed(evt);
            }
        });

        hView.setBackground(new java.awt.Color(153, 153, 153));
        hView.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        hView.setText("View");
        hView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hViewActionPerformed(evt);
            }
        });

        jButton13.setBackground(new java.awt.Color(153, 153, 153));
        jButton13.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton13.setText("Back");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
                        .addComponent(hView, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(hCreate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(23, 23, 23))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(jLabel41)
                .addGap(65, 65, 65)
                .addComponent(hCreate)
                .addGap(53, 53, 53)
                .addComponent(hView)
                .addGap(51, 51, 51)
                .addComponent(jButton13)
                .addContainerGap(321, Short.MAX_VALUE))
        );

        jSplitPane3.setLeftComponent(jPanel2);

        hosParent.setLayout(new java.awt.CardLayout());

        CreateHospital.setPreferredSize(new java.awt.Dimension(900, 600));
        CreateHospital.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel42.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel42.setText("Hospital Name:");
        CreateHospital.add(jLabel42, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 134, -1, -1));

        jLabel43.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel43.setText("Hospital Id:");
        CreateHospital.add(jLabel43, new org.netbeans.lib.awtextra.AbsoluteConstraints(128, 218, -1, -1));
        CreateHospital.add(HospitalName, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 130, 264, -1));
        CreateHospital.add(HospitalId, new org.netbeans.lib.awtextra.AbsoluteConstraints(214, 210, 264, -1));

        hSave.setBackground(new java.awt.Color(153, 153, 153));
        hSave.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        hSave.setText("Save");
        hSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hSaveActionPerformed(evt);
            }
        });
        CreateHospital.add(hSave, new org.netbeans.lib.awtextra.AbsoluteConstraints(319, 266, -1, -1));

        jLabel55.setIcon(new javax.swing.ImageIcon("F:\\NorthEastern Classes\\AED\\AED_Assign_101\\GowdruPalakshappa_Abhilash_002764845\\AED_Assign_102\\HospitalModel\\images\\white-wallpapers-37.jpg")); // NOI18N
        jLabel55.setText("jLabel55");
        jLabel55.setPreferredSize(new java.awt.Dimension(900, 600));
        CreateHospital.add(jLabel55, new org.netbeans.lib.awtextra.AbsoluteConstraints(-4, 1, 910, 600));

        hosParent.add(CreateHospital, "card2");

        ViewHospital.setPreferredSize(new java.awt.Dimension(900, 600));
        ViewHospital.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        hTableDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Hospital Name", "Hosptial ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane5.setViewportView(hTableDetails);

        ViewHospital.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 46, 752, 250));
        ViewHospital.add(vHospitalName, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 337, 264, -1));
        ViewHospital.add(vHospitalId, new org.netbeans.lib.awtextra.AbsoluteConstraints(225, 417, 264, -1));

        hUpdate.setBackground(new java.awt.Color(153, 153, 153));
        hUpdate.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        hUpdate.setText("Update");
        hUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hUpdateActionPerformed(evt);
            }
        });
        ViewHospital.add(hUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(315, 464, -1, -1));

        jLabel44.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel44.setText("Hospital Name:");
        ViewHospital.add(jLabel44, new org.netbeans.lib.awtextra.AbsoluteConstraints(74, 341, -1, -1));

        jLabel45.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel45.setText("Hospital Id:");
        ViewHospital.add(jLabel45, new org.netbeans.lib.awtextra.AbsoluteConstraints(102, 421, -1, -1));

        jButton16.setBackground(new java.awt.Color(153, 153, 153));
        jButton16.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton16.setText("View");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });
        ViewHospital.add(jButton16, new org.netbeans.lib.awtextra.AbsoluteConstraints(555, 337, -1, -1));

        hDelete.setBackground(new java.awt.Color(153, 153, 153));
        hDelete.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        hDelete.setText("Delete");
        hDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hDeleteActionPerformed(evt);
            }
        });
        ViewHospital.add(hDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(668, 337, -1, -1));

        jLabel39.setIcon(new javax.swing.ImageIcon("F:\\NorthEastern Classes\\AED\\AED_Assign_101\\GowdruPalakshappa_Abhilash_002764845\\AED_Assign_102\\HospitalModel\\images\\white-wallpapers-37.jpg")); // NOI18N
        jLabel39.setText("jLabel39");
        jLabel39.setPreferredSize(new java.awt.Dimension(900, 600));
        ViewHospital.add(jLabel39, new org.netbeans.lib.awtextra.AbsoluteConstraints(-4, 1, 910, 600));

        hosParent.add(ViewHospital, "card3");

        jSplitPane3.setRightComponent(hosParent);

        javax.swing.GroupLayout HospitalLayout = new javax.swing.GroupLayout(Hospital);
        Hospital.setLayout(HospitalLayout);
        HospitalLayout.setHorizontalGroup(
            HospitalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
        );
        HospitalLayout.setVerticalGroup(
            HospitalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane3)
        );

        Parent.add(Hospital, "card10");

        ViewDoctor.setPreferredSize(new java.awt.Dimension(900, 600));

        vDocTableDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Doc Id", "Department", "Hospital", "UserName", "Password"
            }
        ));
        vDocTableDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vDocTableDetailsMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(vDocTableDetails);

        jLabel38.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel38.setText("Name:");

        jLabel40.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel40.setText("DocId:");

        jLabel46.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel46.setText("Department:");

        dVUpdate.setBackground(new java.awt.Color(153, 153, 153));
        dVUpdate.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        dVUpdate.setText("Update");
        dVUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dVUpdateActionPerformed(evt);
            }
        });

        dVDelete.setBackground(new java.awt.Color(153, 153, 153));
        dVDelete.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        dVDelete.setText("Delete");
        dVDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dVDeleteActionPerformed(evt);
            }
        });

        dVBack.setBackground(new java.awt.Color(153, 153, 153));
        dVBack.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        dVBack.setText("Back");
        dVBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dVBackActionPerformed(evt);
            }
        });

        dHospitalName1.setEditable(false);

        jLabel54.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel54.setText("Hospital Name:");

        dHosTableDetails1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Hospital Name", "Hosptial ID"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane10.setViewportView(dHosTableDetails1);

        javax.swing.GroupLayout ViewDoctorLayout = new javax.swing.GroupLayout(ViewDoctor);
        ViewDoctor.setLayout(ViewDoctorLayout);
        ViewDoctorLayout.setHorizontalGroup(
            ViewDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewDoctorLayout.createSequentialGroup()
                .addGroup(ViewDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ViewDoctorLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 982, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(ViewDoctorLayout.createSequentialGroup()
                        .addGroup(ViewDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ViewDoctorLayout.createSequentialGroup()
                                .addGap(105, 105, 105)
                                .addGroup(ViewDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(ViewDoctorLayout.createSequentialGroup()
                                        .addComponent(jLabel40)
                                        .addGap(18, 18, 18)
                                        .addComponent(dVDoctorId))
                                    .addGroup(ViewDoctorLayout.createSequentialGroup()
                                        .addComponent(jLabel38)
                                        .addGap(18, 18, 18)
                                        .addComponent(dVName, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(ViewDoctorLayout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(ViewDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel54)
                                    .addComponent(dVBack)
                                    .addComponent(jLabel46))
                                .addGroup(ViewDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(ViewDoctorLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(ViewDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(ViewDoctorLayout.createSequentialGroup()
                                                .addGap(35, 35, 35)
                                                .addComponent(dVUpdate)
                                                .addGap(45, 45, 45)
                                                .addComponent(dVDelete))
                                            .addComponent(dVDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ViewDoctorLayout.createSequentialGroup()
                                        .addGap(19, 19, 19)
                                        .addComponent(dHospitalName1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(48, 48, 48)
                        .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ViewDoctorLayout.setVerticalGroup(
            ViewDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewDoctorLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37)
                .addGroup(ViewDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ViewDoctorLayout.createSequentialGroup()
                        .addGroup(ViewDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel38)
                            .addComponent(dVName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(ViewDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel40)
                            .addComponent(dVDoctorId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(ViewDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel46)
                            .addComponent(dVDepartment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(ViewDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel54)
                            .addComponent(dHospitalName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(ViewDoctorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dVDelete)
                            .addComponent(dVUpdate)
                            .addComponent(dVBack)))
                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        Parent.add(ViewDoctor, "card11");

        ViewPatitent.setPreferredSize(new java.awt.Dimension(900, 600));

        vPatientTableDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "PatientID", "BloodType", "Gender", "BloodPressure", "DOB", "Username", "Password"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        vPatientTableDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                vPatientTableDetailsMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(vPatientTableDetails);

        jLabel47.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel47.setText("DOB:");

        pVBloodType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "AB", "O" }));

        jLabel48.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel48.setText("BloodType:");

        jLabel49.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel49.setText("BloodPressure:");

        jLabel50.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel50.setText("Gender:");

        jLabel51.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel51.setText("Name:");

        pVGender.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female" }));

        jLabel52.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel52.setText("PatientId:");

        pVDelete.setBackground(new java.awt.Color(153, 153, 153));
        pVDelete.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        pVDelete.setText("Delete");
        pVDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pVDeleteActionPerformed(evt);
            }
        });

        pVUpdate.setBackground(new java.awt.Color(153, 153, 153));
        pVUpdate.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        pVUpdate.setText("Update");
        pVUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pVUpdateActionPerformed(evt);
            }
        });

        pVBack.setBackground(new java.awt.Color(153, 153, 153));
        pVBack.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        pVBack.setText("Back");
        pVBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pVBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ViewPatitentLayout = new javax.swing.GroupLayout(ViewPatitent);
        ViewPatitent.setLayout(ViewPatitentLayout);
        ViewPatitentLayout.setHorizontalGroup(
            ViewPatitentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewPatitentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ViewPatitentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ViewPatitentLayout.createSequentialGroup()
                        .addGroup(ViewPatitentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel52)
                            .addComponent(jLabel51)
                            .addComponent(jLabel47)
                            .addComponent(jLabel48)
                            .addComponent(jLabel49))
                        .addGap(18, 18, 18)
                        .addGroup(ViewPatitentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pVName, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(ViewPatitentLayout.createSequentialGroup()
                                .addGap(78, 78, 78)
                                .addComponent(pVUpdate))
                            .addGroup(ViewPatitentLayout.createSequentialGroup()
                                .addComponent(pVBloodType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel50)
                                .addGap(18, 18, 18)
                                .addComponent(pVGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(ViewPatitentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(pVDob, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pVBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(pVPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(ViewPatitentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(pVDelete)
                            .addComponent(pVBack))
                        .addGap(58, 58, 58))
                    .addGroup(ViewPatitentLayout.createSequentialGroup()
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 859, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(213, Short.MAX_VALUE))))
        );
        ViewPatitentLayout.setVerticalGroup(
            ViewPatitentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewPatitentLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addGroup(ViewPatitentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel51)
                    .addComponent(pVName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pVDelete))
                .addGap(19, 19, 19)
                .addGroup(ViewPatitentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pVPatientId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel52))
                .addGap(18, 18, 18)
                .addGroup(ViewPatitentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel50)
                    .addGroup(ViewPatitentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(pVBloodType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel48)
                        .addComponent(pVGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(12, 12, 12)
                .addGroup(ViewPatitentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pVBloodPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel49))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ViewPatitentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel47)
                    .addComponent(pVDob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ViewPatitentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pVUpdate)
                    .addComponent(pVBack))
                .addContainerGap(114, Short.MAX_VALUE))
        );

        Parent.add(ViewPatitent, "card12");

        ListOfPaitents.setPreferredSize(new java.awt.Dimension(900, 600));

        jLabel58.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel58.setText("Heart Rate:");

        jLabel59.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel59.setText("Weight:");

        pUpdate1.setBackground(new java.awt.Color(153, 153, 153));
        pUpdate1.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        pUpdate1.setText("Update Encounter");
        pUpdate1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pUpdate1ActionPerformed(evt);
            }
        });

        jLabel53.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jLabel53.setText("TimeStamp:");

        lPatitentTableDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Name", "PatientID", "BloodType", "Gender", "BloodPressure", "DOB", "Encounter"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        lPatitentTableDetails.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lPatitentTableDetailsMouseClicked(evt);
            }
        });
        jScrollPane8.setViewportView(lPatitentTableDetails);

        lTimeStamp.setEditable(false);

        jButton8.setBackground(new java.awt.Color(153, 153, 153));
        jButton8.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        jButton8.setText("Back");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ListOfPaitentsLayout = new javax.swing.GroupLayout(ListOfPaitents);
        ListOfPaitents.setLayout(ListOfPaitentsLayout);
        ListOfPaitentsLayout.setHorizontalGroup(
            ListOfPaitentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ListOfPaitentsLayout.createSequentialGroup()
                .addGroup(ListOfPaitentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ListOfPaitentsLayout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addGroup(ListOfPaitentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel59)
                            .addComponent(jLabel58))
                        .addGap(18, 18, 18)
                        .addGroup(ListOfPaitentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(ListOfPaitentsLayout.createSequentialGroup()
                                .addGroup(ListOfPaitentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(pUpdate1)
                                    .addComponent(lWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(78, 78, 78)
                                .addGroup(ListOfPaitentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(ListOfPaitentsLayout.createSequentialGroup()
                                        .addComponent(jLabel53)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lTimeStamp, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jButton8)))))
                    .addGroup(ListOfPaitentsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 864, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(208, Short.MAX_VALUE))
        );
        ListOfPaitentsLayout.setVerticalGroup(
            ListOfPaitentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ListOfPaitentsLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 258, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(44, 44, 44)
                .addGroup(ListOfPaitentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel58)
                    .addComponent(lHeartRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(ListOfPaitentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel59)
                    .addComponent(jLabel53)
                    .addComponent(lTimeStamp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(ListOfPaitentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pUpdate1)
                    .addComponent(jButton8))
                .addContainerGap(189, Short.MAX_VALUE))
        );

        Parent.add(ListOfPaitents, "card14");

        jSplitPane1.setRightComponent(Parent);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        userName.setText("");
        password.setText("");
        
    }//GEN-LAST:event_jButton4ActionPerformed
       
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        String userStr = userName.getText();
        String passWordStr = password.getText();
        if(userStr.equalsIgnoreCase("admin") && passWordStr.equalsIgnoreCase("12345")){
            //JOptionPane.showMessageDialog(this, "Login in SuccessFul");
            Parent.removeAll();
            Parent.add(rolesPanel);
            Parent.repaint();
            Parent.revalidate();
 
            populateUserTable();
        }else {
            
           UserAccount useraccount = userAccountDirectory.authenticateUser(userName.getText(), password.getText()); 
           
            if(useraccount != null){
                if(useraccount.getRole().equals(roles.Admin)){
                         Parent.removeAll();
                         Parent.add(rolesPanel);
                         Parent.repaint();
                         Parent.revalidate();

               }
               if(useraccount.getRole().equals(roles.Patient)){
                        Parent.removeAll();
                        Parent.add(PatientPanel);
                        Parent.repaint();
                        Parent.revalidate();
                        
                    Patient patient = patientDirectory.authenticateUser(userName.getText(), password.getText());
                    if(patient != null){
                        int patientId = patient.getPersonId() + 1;
                        pName.setText(patient.getName());
                        Date date = patient.getDoa();
                        pDob.setDate(date);
                        pPatientId.setText((String.valueOf(patientId)));
                        pGender.setSelectedItem(patient.getGender());
                        populateListDoctorTable();  
                    }                        
               }
               if(useraccount.getRole().equals(roles.Doctor)){
                        Parent.removeAll();
                        Parent.add(DoctorPanel);
                        Parent.repaint();
                        Parent.revalidate();
                         Doctor doctor = doctorDirectory.authenticateUser(userName.getText(), password.getText());
                        if(doctor != null){
                            populateHospitalTable(dHosTableDetails);
                        }                            
               }
               if(useraccount.getRole().equals(roles.Hospital)){
                        Parent.removeAll();
                        Parent.add(Hospital);
                        Parent.repaint();
                        Parent.revalidate();                        
               }
               if(useraccount.getRole().equals(roles.Community)){
                        Parent.removeAll();
                        Parent.add(ViewPerson);
                        Parent.repaint();
                        Parent.revalidate(); 

                        populatePersonTable();                        
               }
           }else{
                JOptionPane.showMessageDialog(this, "Invalid Email and UserName");  
           }           
        }
        
         
    }//GEN-LAST:event_jButton5ActionPerformed
   
    private void accountsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountsActionPerformed
        // TODO add your handling code here:
            Parent.removeAll();
            Parent.add(mAccounts);
            Parent.repaint();
            Parent.revalidate();
            
            populateUserTable();
        
    }//GEN-LAST:event_accountsActionPerformed

    private void mSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mSaveActionPerformed
        // TODO add your handling code here:
        
        UserAccount userAccount = userAccountDirectory.authenticateUser(mUsername.getText(), mPassword.getText());
        if(userAccount!=null){
            JOptionPane.showMessageDialog(this, "UserName and Password Exists");  
        }else{
          
            if(mRoles.getSelectedItem().equals("Admin"))
            {
               userAccountDirectory.createUserAccount(mUsername.getText(), mPassword.getText(),roles.Admin);
            }       
            if(mRoles.getSelectedItem().equals("Doctor"))
            {
               userAccountDirectory.createUserAccount(mUsername.getText(), mPassword.getText(),roles.Doctor);
            }                
            if(mRoles.getSelectedItem().equals("Patient"))
            {
               userAccountDirectory.createUserAccount(mUsername.getText(), mPassword.getText(),roles.Patient);
            }             
            if(mRoles.getSelectedItem().equals("Community"))
            {
               userAccountDirectory.createUserAccount(mUsername.getText(), mPassword.getText(),roles.Community);
            }
            if(mRoles.getSelectedItem().equals("Hospital"))
            {
               userAccountDirectory.createUserAccount(mUsername.getText(), mPassword.getText(),roles.Hospital);
            }

            populateUserTable();
            
        }

    }//GEN-LAST:event_mSaveActionPerformed

    private void mUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mUpdateActionPerformed
        // TODO add your handling code here:
        int selectedIndexRow = mTableDetails.getSelectedRow();

        if(selectedIndexRow<0){
            JOptionPane.showMessageDialog(this, "Please Select the row to Update it");
            return;
        }
        
        DefaultTableModel model  = (DefaultTableModel)mTableDetails.getModel();
        
        UserAccount userAccount = getUserData(model);
                
        UserAccount userAccountToUpdate = userAccountDirectory.getUserAccount(userAccount);
        
        setUserData(userAccountToUpdate);
               
        JOptionPane.showMessageDialog(this, "Updated a User");
              
        populateUserTable();
    }//GEN-LAST:event_mUpdateActionPerformed

    private void mDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mDeleteActionPerformed
//         TODO add your handling code here:
        
        int selectedIndexRow = mTableDetails.getSelectedRow();

        if(selectedIndexRow<0){
            JOptionPane.showMessageDialog(this, "Please Select the row to Delete it");
            return;
        }
        
        DefaultTableModel model  = (DefaultTableModel)mTableDetails.getModel();
        
        UserAccount userAccount = getUserData(model);
                
        userAccountDirectory.deleteUserAccount(userAccount);
               
        JOptionPane.showMessageDialog(this, "Deleted a User");
              
        populateUserTable();
    }//GEN-LAST:event_mDeleteActionPerformed

    private void saveRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveRegisterActionPerformed
        // TODO add your handling code here:   
        if(rPersonId.getText().trim().equalsIgnoreCase("")|| rName.getText().trim().equalsIgnoreCase("")|| rHouse.getText().trim().equalsIgnoreCase("") || 
                rAddress.getText().trim().equalsIgnoreCase("") || rZipCode.getText().trim().equalsIgnoreCase("") || rDob.getDate() == null||  
                rStates.getText().trim().equalsIgnoreCase("") || rCities.getText().trim().equalsIgnoreCase("") || rUsername .getText().trim().equalsIgnoreCase("") || 
                rPassword.getText().trim().equalsIgnoreCase(""))
        {
            JOptionPane.showMessageDialog(this, "Empty TextFields");
        } else{  
            
         UserAccount useraccount =  userAccountDirectory.authenticateUser(rUsername.getText(), rPassword.getText());
        
        if(useraccount != null){
            JOptionPane.showMessageDialog(this, "UserName and Password Already Exists");
        }
        else{
            int personId = Integer.parseInt(rPersonId.getText()); 
            String RoleString = getSelectedValue((String)rRoles.getSelectedItem());
            Roles role = new Roles();
            role.setRoleType(RoleString);
            House house = new House(rHouse.getText());
            int zipCode = Integer.parseInt(rZipCode.getText());
            String Address = rAddress.getText();
            Community community = new Community(zipCode, Address, house);
            String States = rStates.getText();
            String Cities = rCities.getText();
            City city = new City(States, Cities, community);
            Date date = rDob.getDate();
            UserAccount userAccount1 = new UserAccount();
            userAccount1.setPassword(rPassword.getText());
            userAccount1.setUsername(rUsername.getText());
            userAccount1.setRole(RoleString);   
            String Gender = (String)rGender.getSelectedItem();


            cityDirectory.addNewCity(States, Cities, community);

            communityDirectory.addCommunityCity(zipCode, Address, house);

            houseDirectory.addHouse(rHouse.getText());

            userAccountDirectory.createUserAccount(rUsername.getText(), rPassword.getText(),RoleString);

            personDirectory.addNewPerson(rName.getText(),personId , RoleString, role, city, community, house, date, userAccount1, Gender);  

            ArrayList list = personDirectory.getPersonDirectory();

            for (int i = 0; i < list.size(); i++) {
                System.out.println(list.get(i) + " ");
            }

            if(rRoles.getSelectedItem().equals("Patient") ){
             patientDirectory.addNewPatient(rName.getText(), personId, "A", "", rName.getText(),personId , RoleString, role, city, community, house, date, userAccount1, Gender);
            }

            if(rRoles.getSelectedItem().equals("Doctor") ){
            Doctor doctor = doctorDirectory.addNewDoctor(rName.getText(), personId, "", rName.getText(),personId , RoleString, role, city, community, house, date, userAccount1, Gender);
            Hospital hospital = new Hospital();
            doctor.setHospital(hospital);
            }

            JOptionPane.showMessageDialog(this, "Saved a Person");

            resetPerson();
           
        }
         
        }
        

        
    }//GEN-LAST:event_saveRegisterActionPerformed

    private void jLabel22MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel22MouseClicked
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(loginPanel);
        Parent.repaint();
        Parent.revalidate(); 
    }//GEN-LAST:event_jLabel22MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(rolesPanel);
        Parent.repaint();
        Parent.revalidate(); 
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(loginPanel);
        Parent.repaint();
        Parent.revalidate(); 
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(loginPanel);
        Parent.repaint();
        Parent.revalidate(); 
        
                          resetPatient();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void pUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pUpdateActionPerformed
        // TODO add your handling code here:
        if(pPatientId.getText().trim().equalsIgnoreCase("") || pName.getText().trim().equalsIgnoreCase("")||
        pBloodPressure.getText().trim().equalsIgnoreCase("")){
                JOptionPane.showMessageDialog(this, "Empty TextFields");
        }else{
            Patient patient = patientDirectory.authenticateUser(userName.getText(), password.getText());
              if(patient!=null){
                  patient.setPatientName(pName.getText());
                  patient.setName(pName.getText());
                  patient.setPatientId(Integer.parseInt(pPatientId.getText()));
                  patient.setBloodType((String)pBloodType.getSelectedItem());
                  patient.setBloodPressure(pBloodPressure.getText());
                  patient.setDoa(pDob.getDate());

                  resetPatient();

                  System.out.println(patient.toString());

                  JOptionPane.showMessageDialog(this, "Patient Updated");                
              }  
        }
                 
           
    }//GEN-LAST:event_pUpdateActionPerformed

    private void dBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dBackActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(loginPanel);
        Parent.repaint();
        Parent.revalidate(); 
        
        resetDoctor();
    }//GEN-LAST:event_dBackActionPerformed

    private void roleRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roleRegisterActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(registerPanel);
        Parent.repaint();
        Parent.revalidate(); 
        
        updateRegister.setEnabled(false);
        
        rHouse.setEditable(true);
        rAddress.setEditable(true);
        rZipCode.setEditable(true);
        rStates.setEditable(true);
        rCities.setEditable(true);
    }//GEN-LAST:event_roleRegisterActionPerformed

    private void dViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dViewActionPerformed
        // TODO add your handling code here:
        
        Doctor doctor = doctorDirectory.authenticateUser(userName.getText(), password.getText());
        if(doctor!=null){         
           dName.setText(doctor.getDoctorName());
           dDoctorId.setText(String.valueOf(doctor.getDocId()));
           dDepartment.setText(doctor.getDepartment());   
           dHospitalName.setText(doctor.getHospital().getName());
        }
    }//GEN-LAST:event_dViewActionPerformed

    private void pViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pViewActionPerformed
        // TODO add your handling code here:
         Patient patient = patientDirectory.authenticateUser(userName.getText(), password.getText());
            if(patient!=null){                                          
                pName.setText(patient.getPatientName());
                String patientId = String.valueOf(patient.getPatientId());
                pPatientId.setText(patientId);
                pBloodType.setSelectedItem(patient.getBloodType());
                pBloodPressure.setText(patient.getBloodPressure());
                Date date = patient.getDoa();
                pDob.setDate(date);
                if(patient.getEncounter()!= null){
                    String heartRate = String.valueOf(patient.getEncounter().getHeartRate());
                    String Weight = String.valueOf(patient.getEncounter().getWeight());
                    String TimeString = String.valueOf(patient.getEncounter().getInstant());
                    lHeartRate1.setText(heartRate);
                    lWeight1.setText(Weight);
                    lTimeStamp1.setText(TimeString);
                }
                
            }
    }//GEN-LAST:event_pViewActionPerformed

    private void dUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dUpdateActionPerformed
        // TODO add your handling code here:
        if(dName.getText().trim().equalsIgnoreCase("") || dDoctorId.getText().trim().equalsIgnoreCase("")||
        dDepartment.getText().trim().equalsIgnoreCase("")){
                        JOptionPane.showMessageDialog(this, "Empty TextFields");
        }else{
            
            int selectedIndexRow = dHosTableDetails.getSelectedRow();
        
            if(selectedIndexRow<0){
                JOptionPane.showMessageDialog(this, "Please Select the Hospital");
                return;
            }
            
            DefaultTableModel model  = (DefaultTableModel)dHosTableDetails.getModel();

            Hospital hospital = new Hospital();
            hospital.setName((String)model.getValueAt(selectedIndexRow, 0));
            hospital.setHospitalId((int)model.getValueAt(selectedIndexRow, 1));
            
            
            
            Doctor doctor = doctorDirectory.authenticateUser(userName.getText(), password.getText());
            if(doctor!=null){         
               String name = dName.getText();
               int doctorId = Integer.parseInt(dDoctorId.getText());
               String department = dDepartment.getText();
               
               doctor.setDoctorName(name);
               doctor.setName(name);
               doctor.setDocId(doctorId);
               doctor.setDepartment(department);
               doctor.setHospital(hospital);
               
               JOptionPane.showMessageDialog(this, "Doctor Updated");  
               
               resetDoctor();
          
            }
        }
        
        
    }//GEN-LAST:event_dUpdateActionPerformed

    private Boolean isPerson = true;
    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(ViewPerson);
        Parent.repaint();
        Parent.revalidate();
        populatePersonTable();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(rolesPanel);
        Parent.repaint();
        Parent.revalidate();
    }//GEN-LAST:event_jButton14ActionPerformed

    private void rBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBackActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(rolesPanel);
        Parent.repaint();
        Parent.revalidate();
        
        saveRegister.setEnabled(true);
        
        resetPerson();
        
    }//GEN-LAST:event_rBackActionPerformed

    private void deletePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePersonActionPerformed
        // TODO add your handling code here:
        
        int selectedIndexRow = pTableDetails.getSelectedRow();
        
        if(selectedIndexRow<0){
            JOptionPane.showMessageDialog(this, "Please Select the row to be Deleted");
            return;
        }
        
        DefaultTableModel model  = (DefaultTableModel)pTableDetails.getModel();
        
        Person person = getPersonData(model,selectedIndexRow);
             
        personDirectory.deletePersonAccount(person);
                    
        JOptionPane.showMessageDialog(this, "Deleted a Person");
        
        populatePersonTable();
    }//GEN-LAST:event_deletePersonActionPerformed

    private void viewPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPersonActionPerformed
        // TODO add your handling code here:
        
        int selectedIndexRow = pTableDetails.getSelectedRow();

        if(selectedIndexRow<0){
            JOptionPane.showMessageDialog(this, "Please Select the row to be Updated");
            return;
        }
        
        Parent.removeAll();
        Parent.add(registerPanel);
        Parent.repaint();
        Parent.revalidate();
        
        DefaultTableModel model  = (DefaultTableModel)pTableDetails.getModel();
        
        Person person = getPersonData(model,selectedIndexRow);
              
        setPersonViewData(person);
        
        rRoles.setEnabled(false);
        
        if(isPerson == true){
            rPersonId.setEditable(true);   
            rName.setEditable(true);
            rHouse.setEditable(false);
            rAddress.setEditable(false); 
            rZipCode.setEditable(false) ;
            rDob.setEnabled(true);
            rStates.setEditable(false);  
            rCities.setEditable(false);  
            rUsername .setEditable(true);  
            rPassword.setEditable(true);
            rGender.setEnabled(true);
        }else{
            rPersonId.setEditable(false);   
            rName.setEditable(false);
            rHouse.setEditable(true);
            rAddress.setEditable(true); 
            rZipCode.setEditable(true) ;
            rDob.setEnabled(false);
            rStates.setEditable(true);  
            rCities.setEditable(true);  
            rUsername .setEditable(false);  
            rPassword.setEditable(false);
            deletePerson.setEnabled(false);
            rGender.setEnabled(false);
        }

        
        updateRegister.setEnabled(true);
        
        saveRegister.setEnabled(false);
        
       
    }//GEN-LAST:event_viewPersonActionPerformed

    private void updateRegisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRegisterActionPerformed
        // TODO add your handling code here:
        if(rPersonId.getText().trim().equalsIgnoreCase("")|| rName.getText().trim().equalsIgnoreCase("")|| rHouse.getText().trim().equalsIgnoreCase("") || 
        rAddress.getText().trim().equalsIgnoreCase("") || rZipCode.getText().trim().equalsIgnoreCase("") || rDob.getDate() == null||  
        rStates.getText().trim().equalsIgnoreCase("") || rCities.getText().trim().equalsIgnoreCase("") || rUsername .getText().trim().equalsIgnoreCase("") || 
        rPassword.getText().trim().equalsIgnoreCase(""))
        {
            JOptionPane.showMessageDialog(this, "Empty TextFields");
        } else{
            
        int selectedIndexRow = pTableDetails.getSelectedRow();

        if(selectedIndexRow<0){
            JOptionPane.showMessageDialog(this, "Please Select the row to be Updated");
            return;
        }
        
        DefaultTableModel model  = (DefaultTableModel)pTableDetails.getModel();
        
        Person person = getPersonData(model,selectedIndexRow);
        
        Person persontoUpdated = personDirectory.getPersonAccount(person);
        
        setPersonData(persontoUpdated);

        populatePersonTable();
        
        JOptionPane.showMessageDialog(this, "Updated the Table");
        
        resetPerson();
            
        }
    }//GEN-LAST:event_updateRegisterActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(ViewDoctor);
        Parent.repaint();
        Parent.revalidate();
        
        populateDoctorTable();
        
        populateHospitalTable(dHosTableDetails1);
                
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(Hospital);
        Parent.repaint();
        Parent.revalidate();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void hCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hCreateActionPerformed
        // TODO add your handling code here:
        hosParent.removeAll();
        hosParent.add(CreateHospital);
        hosParent.repaint();
        hosParent.revalidate();
    }//GEN-LAST:event_hCreateActionPerformed

    private void hViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hViewActionPerformed
        // TODO add your handling code here:
        hosParent.removeAll();
        hosParent.add(ViewHospital);
        hosParent.repaint();
        hosParent.revalidate();

        populateHospitalTable(hTableDetails);
    }//GEN-LAST:event_hViewActionPerformed

    private void hSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hSaveActionPerformed
        // TODO add your handling code here:
        if(HospitalName.getText().trim().equalsIgnoreCase("")||HospitalId.getText().trim().equalsIgnoreCase("")){
            JOptionPane.showMessageDialog(this, "Empty TextFields");
        }else{
            String name = HospitalName.getText();
            int id = Integer.parseInt(HospitalId.getText());
            hospitalDirectory.addNewHospital(name, id);
            JOptionPane.showMessageDialog(this, "Addded Hosptial");
            resetHospital();
        }

    }//GEN-LAST:event_hSaveActionPerformed

    private void hUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hUpdateActionPerformed
        // TODO add your handling code here:

        if(vHospitalName.getText().trim().equalsIgnoreCase("")||vHospitalId.getText().trim().equalsIgnoreCase("")){
            JOptionPane.showMessageDialog(this, "Empty TextFields");
        }else{
            int selectedIndexRow = hTableDetails.getSelectedRow();

            if(selectedIndexRow<0){
                JOptionPane.showMessageDialog(this, "Please Select the row to be Viewd");
                return;
            }

            DefaultTableModel model  = (DefaultTableModel)hTableDetails.getModel();

            Hospital hospital = new Hospital();
            hospital.setName((String)model.getValueAt(selectedIndexRow, 0));
            hospital.setHospitalId((int)model.getValueAt(selectedIndexRow, 1));

            Hospital hospitalToBeUpdated = hospitalDirectory.getHospitalF(hospital);

            hospitalToBeUpdated.setName(vHospitalName.getText());
            hospitalToBeUpdated.setHospitalId(Integer.parseInt(vHospitalId.getText()));

            JOptionPane.showMessageDialog(this, "Updated the Hospital");

            populateHospitalTable(hTableDetails);
            
            vHospitalName.setText("");
            vHospitalId.setText("");
        }
    }//GEN-LAST:event_hUpdateActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:

        int selectedIndexRow = hTableDetails.getSelectedRow();

        if(selectedIndexRow<0){
            JOptionPane.showMessageDialog(this, "Please Select the row to be Viewed");
            return;
        }

        DefaultTableModel model  = (DefaultTableModel)hTableDetails.getModel();

        Hospital hospital = new Hospital();
        hospital.setName((String)model.getValueAt(selectedIndexRow, 0));
        hospital.setHospitalId((int)model.getValueAt(selectedIndexRow, 1));

        vHospitalName.setText(hospital.getName());
        vHospitalId.setText(String.valueOf(hospital.getHospitalId()));
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(loginPanel);
        Parent.repaint();
        Parent.revalidate();
    }//GEN-LAST:event_jButton13ActionPerformed

    private void hDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hDeleteActionPerformed
        // TODO add your handling code here:
        int selectedIndexRow = hTableDetails.getSelectedRow();

        if(selectedIndexRow<0){
            JOptionPane.showMessageDialog(this, "Please Select the row to be Deleted");
            return;
        }

        DefaultTableModel model  = (DefaultTableModel)hTableDetails.getModel();

        Hospital hospital = new Hospital();
        hospital.setName((String)model.getValueAt(selectedIndexRow, 0));
        hospital.setHospitalId((int)model.getValueAt(selectedIndexRow, 1));
        
        hospitalDirectory.deleteHospitalF(hospital);
        
        JOptionPane.showMessageDialog(this, "Deleted the Hospital");

        populateHospitalTable(hTableDetails);
    }//GEN-LAST:event_hDeleteActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(ViewPatitent);
        Parent.repaint();
        Parent.revalidate();
        
        populatePatitentTable();
        
    }//GEN-LAST:event_jButton10ActionPerformed

    private void dVBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dVBackActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(rolesPanel);
        Parent.repaint();
        Parent.revalidate();
    }//GEN-LAST:event_dVBackActionPerformed

    private void pVBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pVBackActionPerformed
        // TODO add your handling code here:
                Parent.removeAll();
        Parent.add(rolesPanel);
        Parent.repaint();
        Parent.revalidate();
    }//GEN-LAST:event_pVBackActionPerformed

    private void pUpdate1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pUpdate1ActionPerformed
        // TODO add your handling code here:
        if(lHeartRate.getText().trim().equalsIgnoreCase("") || lWeight.getText().trim().equalsIgnoreCase("")){
                JOptionPane.showMessageDialog(this, "Empty Texfields");
        }else{
                    int selectedIndexRow = lPatitentTableDetails.getSelectedRow();
        
        if(selectedIndexRow<0){
            JOptionPane.showMessageDialog(this, "Please Select the Patient to Create/Update the Encounter");
            return;
        }
        
        DefaultTableModel model  = (DefaultTableModel)lPatitentTableDetails.getModel();

        Doctor doctor = doctorDirectory.authenticateUser(userName.getText(), password.getText());
        
        Patient patient = new Patient();
        
        String name = (String)model.getValueAt(selectedIndexRow, 0);
        int  ID = (int)model.getValueAt(selectedIndexRow, 1);
        String  BloodType = (String)model.getValueAt(selectedIndexRow, 2);
        String  Gender = (String)model.getValueAt(selectedIndexRow, 3);
        String  BloodPressure = (String)model.getValueAt(selectedIndexRow, 4);
        Date date = (Date)model.getValueAt(selectedIndexRow, 5);
        Encounter encounter = (Encounter)model.getValueAt(selectedIndexRow, 6);
        
        patient.setPatientName(name);
        patient.setPatientId(ID);
        patient.setBloodType(BloodType);
        patient.setBloodPressure(BloodPressure);
        patient.setDoa(date);
        patient.setEncounter(encounter);
        
        Patient patientEncouterToUpdate = patientDirectory.getPatient(patient);
        
        String timeStamp = patientEncouterToUpdate.getEncounter().getInstant().toString();
        patientEncouterToUpdate.getEncounter().setHeartRate(Integer.parseInt(lHeartRate.getText()));
        patientEncouterToUpdate.getEncounter().setWeight(Integer.parseInt(lWeight.getText()));
        
        JOptionPane.showMessageDialog(this, "Encounter Created/Updated");
        
        lHeartRate.setText("");
        lWeight.setText("");
        }

        
    }//GEN-LAST:event_pUpdate1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:

        int selectedIndexRow = lDoctorsTableDetails.getSelectedRow();

        if(selectedIndexRow<0){
            JOptionPane.showMessageDialog(this, "Please Select the Doctor to schedule an Appointment");
            return;
        }
        
        DefaultTableModel model  = (DefaultTableModel)lDoctorsTableDetails.getModel();

        Doctor doctor = new Doctor();
        String docName = (String)model.getValueAt(selectedIndexRow, 0);
        doctor.setDoctorName(docName);
        int ID = (int)model.getValueAt(selectedIndexRow, 1); 
        doctor.setDocId(ID);
        String departString = (String)model.getValueAt(selectedIndexRow, 2);
        doctor.setDepartment(departString);
        Hospital hospital = new Hospital();
        hospital = (Hospital)model.getValueAt(selectedIndexRow, 3);
        doctor.setHospital(hospital);
        
        Doctor DoctortoUpdated = doctorDirectory.getDoctor(doctor);
        
        Patient patient = patientDirectory.authenticateUser(userName.getText(), password.getText());
        
        if(patient.getEncounter()== null)
        {
                  Timestamp instant= Timestamp.from(Instant.now());  
                    Encounter encounter = encounterDirectory.addNewEncounter(instant);

                    if(patient != null){
                        DoctortoUpdated.addPatient(patient);
                        patient.setEncounter(encounter);

                    }  
                    
            JOptionPane.showMessageDialog(this, "Encounter Created");
        }else{
            JOptionPane.showMessageDialog(this, "Encounter Already Created");
        }

        
        
        Person person = personDirectory.authenticateUser(userName.getText(), password.getText());
        
        System.out.println(patient.toString());
        //System.out.println(DoctortoUpdated.toString());
        System.out.println(person.toString());
        

        

    }//GEN-LAST:event_jButton6ActionPerformed

    private void dLPaitentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dLPaitentActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(ListOfPaitents);
        Parent.repaint();
        Parent.revalidate();
        
        Doctor doctor = doctorDirectory.authenticateUser(userName.getText(), password.getText());
        if(doctor!= null){
            populateListPatitentTable(doctor);
        }
        
    }//GEN-LAST:event_dLPaitentActionPerformed

    private void vDocTableDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vDocTableDetailsMouseClicked
        // TODO add your handling code here:
        int selectedIndexRow = vDocTableDetails.getSelectedRow();

        if(selectedIndexRow<0){
            JOptionPane.showMessageDialog(this, "Please Select the row to be Viewed");
            return;
        }

        DefaultTableModel model  = (DefaultTableModel)vDocTableDetails.getModel();
              
        dVName.setText((String)model.getValueAt(selectedIndexRow, 0));
        int ID = (int) model.getValueAt(selectedIndexRow, 1);
        dVDoctorId.setText(String.valueOf(ID));
        dVDepartment.setText((String)model.getValueAt(selectedIndexRow, 2));    
        Hospital hospital = (Hospital)model.getValueAt(selectedIndexRow, 3);
        dHospitalName1.setText(hospital.getName());
    }//GEN-LAST:event_vDocTableDetailsMouseClicked

    private void dVUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dVUpdateActionPerformed
        // TODO add your handling code here:if(dName.getText().trim().equalsIgnoreCase("") || dDoctorId.getText().trim().equalsIgnoreCase("")||
        if(dVName.getText().trim().equalsIgnoreCase("")||
                dVDoctorId.getText().trim().equalsIgnoreCase("") || 
                dVDepartment.getText().trim().equalsIgnoreCase("")){
                        JOptionPane.showMessageDialog(this, "Empty TextFields");
        }else{
            
            int selectedIndexRow = dHosTableDetails1.getSelectedRow();
        
            if(selectedIndexRow<0){
                JOptionPane.showMessageDialog(this, "Please Select the Hospital");
                return;
            }
            
            DefaultTableModel model  = (DefaultTableModel)dHosTableDetails1.getModel();

            Hospital hospital = new Hospital();
            hospital.setName((String)model.getValueAt(selectedIndexRow, 0));
            hospital.setHospitalId((int)model.getValueAt(selectedIndexRow, 1));
            
            
            int selectedIndexRow2 = vDocTableDetails.getSelectedRow();
        
            if(selectedIndexRow2<0){
                JOptionPane.showMessageDialog(this, "Please Select the Doctor");
                return;
            }
            
            DefaultTableModel model1  = (DefaultTableModel)vDocTableDetails.getModel();

            UserAccount userAccount = new UserAccount();
            String userName = (String)model1.getValueAt(selectedIndexRow2, 4);
            String password = (String)model1.getValueAt(selectedIndexRow2, 5);
            userAccount.setUsername(userName);
            userAccount.setPassword(password);

            Doctor doctor = doctorDirectory.authenticateUser(userAccount.getUsername(), userAccount.getPassword());
            if(doctor!=null){         
               String name = dVName.getText();
               int doctorId = Integer.parseInt(dVDoctorId.getText());
               String department = dVDepartment.getText();
               
               doctor.setDoctorName(name);
               doctor.setName(name);
               doctor.setDocId(doctorId);
               doctor.setDepartment(department);
               doctor.setHospital(hospital);
               
               JOptionPane.showMessageDialog(this, "Doctor Updated");  
               
               resetDoctor();
               
               populateDoctorTable();
          
            }
        }
    }//GEN-LAST:event_dVUpdateActionPerformed

    private void dVDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dVDeleteActionPerformed
        // TODO add your handling code here:
            int selectedIndexRow2 = vDocTableDetails.getSelectedRow();
        
            if(selectedIndexRow2<0){
                JOptionPane.showMessageDialog(this, "Please Select the Doctor");
                return;
            }
            
            DefaultTableModel model1  = (DefaultTableModel)vDocTableDetails.getModel();

            UserAccount userAccount = new UserAccount();
            String userName = (String)model1.getValueAt(selectedIndexRow2, 4);
            String password = (String)model1.getValueAt(selectedIndexRow2, 5);
            userAccount.setUsername(userName);
            userAccount.setPassword(password);

            Doctor doctor = doctorDirectory.authenticateUser(userAccount.getUsername(), userAccount.getPassword());
            Person person = personDirectory.authenticateUser(userAccount.getUsername(), userAccount.getPassword());
            if(doctor!=null){  
                doctorDirectory.deleteDoctor(doctor);
                personDirectory.deletePersonAccount(person);
                JOptionPane.showMessageDialog(this, "Doctor Deleted");
                populateDoctorTable();
            }
    }//GEN-LAST:event_dVDeleteActionPerformed

    private void mTableDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mTableDetailsMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_mTableDetailsMouseClicked

    private void vPatientTableDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_vPatientTableDetailsMouseClicked
        // TODO add your handling code here:
        int selectedIndexRow2 = vPatientTableDetails.getSelectedRow();
        
        if(selectedIndexRow2<0){
            JOptionPane.showMessageDialog(this, "Please Select the Patient");
            return;
        }
        
        DefaultTableModel model  = (DefaultTableModel)vPatientTableDetails.getModel();
        
        UserAccount userAccount = new UserAccount();
        String userName = (String)model.getValueAt(selectedIndexRow2, 6);
        String password = (String)model.getValueAt(selectedIndexRow2, 7);
        userAccount.setUsername(userName);
        userAccount.setPassword(password);
        
        Patient patient = patientDirectory.authenticateUser(userName, password);
        if(patient!=null){
            pVName.setText(patient.getPatientName());
            int Id = patient.getPatientId();
            pVPatientId.setText(String.valueOf(Id));
            pVBloodType.setSelectedItem(patient.getBloodType());
            pVGender.setSelectedItem(patient.getGender());
            pVBloodPressure.setText(patient.getBloodPressure());
            pVDob.setDate(patient.getDoa());
        }
    }//GEN-LAST:event_vPatientTableDetailsMouseClicked

    private void pVUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pVUpdateActionPerformed
        // TODO add your handling code here:
        if(pVName.getText().trim().equalsIgnoreCase("")||
                pVPatientId.getText().trim().equalsIgnoreCase("") || 
                pVBloodPressure.getText().trim().equalsIgnoreCase("")){
                        JOptionPane.showMessageDialog(this, "Empty TextFields");
        }else{
            
            int selectedIndexRow = vPatientTableDetails.getSelectedRow();
        
            if(selectedIndexRow<0){
                JOptionPane.showMessageDialog(this, "Please Select the Patient");
                return;
            }
            
            DefaultTableModel model  = (DefaultTableModel)vPatientTableDetails.getModel();
        
            UserAccount userAccount = new UserAccount();
            String userName = (String)model.getValueAt(selectedIndexRow, 6);
            String password = (String)model.getValueAt(selectedIndexRow, 7);
            userAccount.setUsername(userName);
            userAccount.setPassword(password);

            Patient patientToUpdated = patientDirectory.authenticateUser(userName, password);
            if(patientToUpdated!=null){
                    patientToUpdated.setPatientName(pVName.getText());
                    patientToUpdated.setName(pVName.getText());
                    int Id = Integer.valueOf(pVPatientId.getText());
                    patientToUpdated.setPatientId(Id);
                    patientToUpdated.setBloodType((String)pVBloodType.getSelectedItem());
                    patientToUpdated.setBloodPressure(pVBloodPressure.getText());
                    patientToUpdated.setGender((String)pVGender.getSelectedItem());
                    patientToUpdated.setDoa(pVDob.getDate());
                    
                    populatePatitentTable();
                    
                    JOptionPane.showMessageDialog(this, "Updated the Paitent");
            }
            
        }
    }//GEN-LAST:event_pVUpdateActionPerformed

    private void pVDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pVDeleteActionPerformed
        // TODO add your handling code here:
        
            int selectedIndexRow = vPatientTableDetails.getSelectedRow();
        
            if(selectedIndexRow<0){
                JOptionPane.showMessageDialog(this, "Please Select the Patient to be Deleted");
                return;
            }
            
            DefaultTableModel model  = (DefaultTableModel)vPatientTableDetails.getModel();
        
            UserAccount userAccount = new UserAccount();
            String userName = (String)model.getValueAt(selectedIndexRow, 6);
            String password = (String)model.getValueAt(selectedIndexRow, 7);
            userAccount.setUsername(userName);
            userAccount.setPassword(password);

            Patient patientToDeleted = patientDirectory.authenticateUser(userName, password);
            Person person = personDirectory.authenticateUser(userName, password);
            if(patientToDeleted!=null){
                patientDirectory.deletePatient(patientToDeleted);
                personDirectory.deletePersonAccount(person);
                
                populatePatitentTable();
                    
                JOptionPane.showMessageDialog(this, "Deleted the Paitent");
            }
    }//GEN-LAST:event_pVDeleteActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(ViewPerson);
        Parent.repaint();
        Parent.revalidate();
        isPerson = false;
        populatePersonTable();
        deletePerson.setEnabled(false);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void lPatitentTableDetailsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lPatitentTableDetailsMouseClicked
        // TODO add your handling code here:
        
        int selectedIndexRow = lPatitentTableDetails.getSelectedRow();
        
        if(selectedIndexRow<0){
            JOptionPane.showMessageDialog(this, "Please Select the Patient to Create/Update the Encounter");
            return;
        }
        
        DefaultTableModel model  = (DefaultTableModel)lPatitentTableDetails.getModel();

        Doctor doctor = doctorDirectory.authenticateUser(userName.getText(), password.getText());
        
        Patient patient = new Patient();
        
        String name = (String)model.getValueAt(selectedIndexRow, 0);
        int  ID = (int)model.getValueAt(selectedIndexRow, 1);
        String  BloodType = (String)model.getValueAt(selectedIndexRow, 2);
        String  Gender = (String)model.getValueAt(selectedIndexRow, 3);
        String  BloodPressure = (String)model.getValueAt(selectedIndexRow, 4);
        Date date = (Date)model.getValueAt(selectedIndexRow, 5);
        Encounter encounter = (Encounter)model.getValueAt(selectedIndexRow, 6);
        
        patient.setPatientName(name);
        patient.setPatientId(ID);
        patient.setBloodType(BloodType);
        patient.setBloodPressure(BloodPressure);
        patient.setDoa(date);
        patient.setEncounter(encounter);
        
        Patient patientEncouterToUpdate = patientDirectory.getPatient(patient);
        
        String timeStamp = patientEncouterToUpdate.getEncounter().getInstant().toString();
        lTimeStamp.setText(timeStamp);
        lHeartRate.setText(String.valueOf(patientEncouterToUpdate.getEncounter().getHeartRate()));
        lWeight.setText(String.valueOf(patientEncouterToUpdate.getEncounter().getWeight()));
    }//GEN-LAST:event_lPatitentTableDetailsMouseClicked

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        Parent.removeAll();
        Parent.add(DoctorPanel);
        Parent.repaint();
        Parent.revalidate();
    }//GEN-LAST:event_jButton8ActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(LoginFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginFrame().setVisible(true);
            }
        });
    }
    
    private String getSelectedValue(String RolesString){
        String returnValueString = null;
        if(RolesString.equals(roles.Admin)){
            returnValueString =  roles.Admin;
        }else if(RolesString.equals(roles.Doctor)){
            returnValueString =  roles.Doctor;
        }else if(RolesString.equals(roles.Patient)){
            returnValueString =  roles.Patient;
        }
        
        return returnValueString;
    }
    
    private UserAccount getUserData(DefaultTableModel model){
        
        int selectedIndexRow = mTableDetails.getSelectedRow();
        
        UserAccount userAccount =  new UserAccount(); 
        userAccount.setUsername((String)model.getValueAt(selectedIndexRow, 1));
        userAccount.setPassword((String)model.getValueAt(selectedIndexRow, 2));

        if(roles.Admin.equals((String)model.getValueAt(selectedIndexRow, 0))){ 
            userAccount.setRole(roles.Admin);
        }else if(roles.Doctor.equals((String)model.getValueAt(selectedIndexRow, 0))){
            userAccount.setRole(roles.Doctor);
        }else if(roles.Patient.equals((String)model.getValueAt(selectedIndexRow, 0))){   
            userAccount.setRole(roles.Patient);
        }else if(roles.Community.equals((String)model.getValueAt(selectedIndexRow, 0))){
            userAccount.setRole(roles.Community);
        }else if(roles.Hospital.equals((String)model.getValueAt(selectedIndexRow, 0))){  
            userAccount.setRole(roles.Hospital);
        }
        
        return userAccount;
    }
    
    private void setUserData(UserAccount userAccount){
        
        userAccount.setUsername(mUsername.getText());
        userAccount.setPassword(mPassword.getText());

        if(roles.Admin.equals((String)mRoles.getSelectedItem())){ 
            userAccount.setRole(roles.Admin);
        }else if(roles.Doctor.equals((String)mRoles.getSelectedItem())){
            userAccount.setRole(roles.Doctor);
        }else if(roles.Patient.equals((String)mRoles.getSelectedItem())){   
            userAccount.setRole(roles.Patient);
        }else if(roles.Community.equals((String)mRoles.getSelectedItem())){
            userAccount.setRole(roles.Community);
        }else if(roles.Hospital.equals((String)mRoles.getSelectedItem())){  
            userAccount.setRole(roles.Hospital);
        }
       
    }
    
    private void populateUserTable() {

        DefaultTableModel model  = (DefaultTableModel)mTableDetails.getModel();
        model.setRowCount(0);
        
        for(UserAccount user : userAccountDirectory.getUserAccountList()){
            
            Object[] row = new Object[4];
            row[0] = user.getRole();
            row[1] = user.getUsername();
            row[2] = user.getPassword();

            model.addRow(row);
        }
            
    }
    
    private void resetPerson() {
        
        rPersonId.setText("");   
        rName.setText("");
        rHouse.setText("");
        rAddress.setText(""); 
        rZipCode.setText("") ;
        rDob.setDate(null);  
        rStates.setText("");  
        rCities.setText("");  
        rUsername .setText("");  
        rPassword.setText("");
        
    }
    
    private void resetPatient() {
        
        pName.setText("");
        pPatientId.setText("");
        pBloodPressure.setText("");
        pDob.setDate(null);
        
    }

    private void resetDoctor() {
        dName.setText("");
        dDoctorId.setText("");
        dDepartment.setText("");
    }
    
    private void resetDoctor2() {
        dVName.setText("");
        dVDoctorId.setText("");
        dVDepartment.setText("");
    }
    
    
    private void populatePersonTable() {

        DefaultTableModel model  = (DefaultTableModel)pTableDetails.getModel();
        model.setRowCount(0);
        
        for(Person person : personDirectory.getPersonDirectory()){
            
            Object[] row = new Object[12];
            row[0] = person.getName();
            row[1] = person.getPersonId();
            row[2] = person.getUserRoles();
            row[3] = person.getGender();
            row[4] = person.getHouse().toString();
            row[5] = person.getCommunity().getAddress();
            row[6] = person.getCommunity().getZipCode();
            row[7] = person.getDoa();
            row[8] = person.getCity().getStates();
            row[9] = person.getCity().getCities();
            row[10] = person.getUseraccount().getUsername();
            row[11] = person.getUseraccount().getPassword();
            
            model.addRow(row);
        }
    } 
    
    private void populateDoctorTable() {

        DefaultTableModel model  = (DefaultTableModel)vDocTableDetails.getModel();
        model.setRowCount(0);
        
        for(Doctor doctor : doctorDirectory.getDirectory()){
            
            Object[] row = new Object[7];
            row[0] = doctor.getDoctorName();
            row[1] = doctor.getDocId();
            row[2] = doctor.getDepartment();
            row[3] = doctor.getHospital();
            row[4] = doctor.getUseraccount().getUsername();
            row[5] = doctor.getUseraccount().getPassword();
            model.addRow(row);
        }
    } 
    
    private void populateListDoctorTable() {

        DefaultTableModel model  = (DefaultTableModel)lDoctorsTableDetails.getModel();
        model.setRowCount(0);
        
        for(Doctor doctor : doctorDirectory.getDirectory()){
            
            Object[] row = new Object[7];
            row[0] = doctor.getDoctorName();
            row[1] = doctor.getDocId();
            row[2] = doctor.getDepartment();
            row[3] = doctor.getHospital();
            model.addRow(row);
        }
    } 
    
    private void populatePatitentTable(){
        
        DefaultTableModel model  = (DefaultTableModel)vPatientTableDetails.getModel();
        model.setRowCount(0);
        
        for(Patient patient : patientDirectory.getDirectory()){
            
            Object[] row = new Object[12];
            row[0] = patient.getPatientName();
            row[1] = patient.getPatientId();
            row[2] = patient.getBloodType();
            row[3] = patient.getGender();
            row[4] = patient.getBloodPressure();
            row[5] = patient.getDoa();
            row[6] = patient.getUseraccount().getUsername();
            row[7] = patient.getUseraccount().getPassword();

            model.addRow(row);
        }
        
    }
    
    private Person getPersonData(DefaultTableModel model, int selectedIndexRow) {
        
        Person person = new Person();
        person.setName((String)model.getValueAt(selectedIndexRow, 0));
        person.setPersonId((int)model.getValueAt(selectedIndexRow, 1));
        String UserRoles = (String)model.getValueAt(selectedIndexRow, 2);
        Roles role = new Roles();
        role.setRoleType(UserRoles);
        person.setUserRoles(UserRoles);
        person.setRoles(role);
        person.setGender((String)model.getValueAt(selectedIndexRow, 3));
        String houesName = (String)model.getValueAt(selectedIndexRow, 4);
        House house = new House(houesName);
        person.setHouse(house);       
        String Address = (String)model.getValueAt(selectedIndexRow, 5);
        int ZipCode = (int)model.getValueAt(selectedIndexRow, 6);
        Date date = (Date)model.getValueAt(selectedIndexRow, 7);
        person.setDoa(date);
        String States = (String)model.getValueAt(selectedIndexRow, 8);
        String City = (String) model.getValueAt(selectedIndexRow, 9);
        String UserNameStr = (String) model.getValueAt(selectedIndexRow, 10);
        String PasswordStr = (String) model.getValueAt(selectedIndexRow, 11); 
        
        Community community = new Community(ZipCode, Address, house);
        
        City city = new City(States, City, community);
        
        UserAccount userAccount = new UserAccount(UserNameStr, PasswordStr, UserRoles);
        
        person.setCity(city);
        person.setCommunity(community);
        person.setHouse(house);
        person.setUseraccount(userAccount);
        
        System.out.println(person.toString());
        
        return person;
           
    }
    
    private Person setPersonData(Person person) {
        person.setName(rName.getText());
        person.setPersonId(Integer.parseInt(rPersonId.getText()));
        String UserRoles = (String)rRoles.getSelectedItem();
        person.setUserRoles(UserRoles);
        Roles role = new Roles();
        role.setRoleType(UserRoles);
        person.setRoles(role);
        person.setGender((String)rGender.getSelectedItem());
        String houesName = rHouse.getText();
        House house = new House(houesName);
        person.setHouse(house);       

//        String Address = rAddress.getText();
//        int ZipCode =Integer.parseInt(rZipCode.getText());
        Date date = rDob.getDate();
        person.setDoa(date);

//        String States = rStates.getText();
//        String City = rCities.getText();
        String UserNameStr = rUsername.getText();
        String PasswordStr = rPassword.getText(); 
        
//        Community community = new Community(ZipCode, Address, house);
//        
//        City city = new City(States, City, community);

        UserAccount userAccount = new UserAccount(UserNameStr, PasswordStr, UserRoles);
        
//        person.setCity(city);
//        person.setCommunity(community);
//        person.setHouse(house);
        person.setUseraccount(userAccount);

       return person;

    }
    
    private void setPersonViewData(Person person) {
        
        rPersonId.setText(String.valueOf(person.getPersonId()));   
        rName.setText(person.getName());
        rHouse.setText(person.getHouse().getHouseName());
        rAddress.setText(person.getCommunity().getAddress()); 
        rZipCode.setText(String.valueOf(person.getCommunity().getZipCode())) ;
        rDob.setDate(person.getDoa());  
        rStates.setText(person.getCity().getStates());  
        rCities.setText(person.getCity().getCities());  
        rUsername .setText(person.getUseraccount().getUsername());  
        rPassword.setText(person.getUseraccount().getPassword());

    }
    
    public void populateHospitalTable(JTable table){
        
        DefaultTableModel model  = (DefaultTableModel)table.getModel();
        model.setRowCount(0);
        
        for(Hospital hos : hospitalDirectory.getHospital()){
            
            Object[] row = new Object[3];
            row[0] = hos.getName();
            row[1] = hos.getHospitalId();

            model.addRow(row);
        }
        
    }
    
    public void populateListPatitentTable(Doctor doctor){
        
        DefaultTableModel model  = (DefaultTableModel)lPatitentTableDetails.getModel();
        model.setRowCount(0);
        
        for(Patient patient : doctor.getPatientDir()){
            
            Object[] row = new Object[12];
            row[0] = patient.getPatientName();
            row[1] = patient.getPatientId();
            row[2] = patient.getBloodType();
            row[3] = patient.getGender();
            row[4] = patient.getBloodPressure();
            row[5] = patient.getDoa();
            row[6] = patient.getEncounter();

            model.addRow(row);
        }
        
    }
       
    public void resetHospital(){
    HospitalName.setText("");
    HospitalId.setText("");
    }
        


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CreateHospital;
    private javax.swing.JPanel DoctorPanel;
    private javax.swing.JPanel Hospital;
    private javax.swing.JTextField HospitalId;
    private javax.swing.JTextField HospitalName;
    private javax.swing.JPanel ListOfPaitents;
    private javax.swing.JPanel Parent;
    private javax.swing.JPanel PatientPanel;
    private javax.swing.JPanel ViewDoctor;
    private javax.swing.JPanel ViewHospital;
    private javax.swing.JPanel ViewPatitent;
    private javax.swing.JPanel ViewPerson;
    private javax.swing.JButton accounts;
    private javax.swing.JButton dBack;
    private javax.swing.JTextField dDepartment;
    private javax.swing.JTextField dDoctorId;
    private javax.swing.JTable dHosTableDetails;
    private javax.swing.JTable dHosTableDetails1;
    private javax.swing.JTextField dHospitalName;
    private javax.swing.JTextField dHospitalName1;
    private javax.swing.JButton dLPaitent;
    private javax.swing.JTextField dName;
    private javax.swing.JButton dUpdate;
    private javax.swing.JButton dVBack;
    private javax.swing.JButton dVDelete;
    private javax.swing.JTextField dVDepartment;
    private javax.swing.JTextField dVDoctorId;
    private javax.swing.JTextField dVName;
    private javax.swing.JButton dVUpdate;
    private javax.swing.JButton dView;
    private javax.swing.JButton deletePerson;
    private javax.swing.JButton hCreate;
    private javax.swing.JButton hDelete;
    private javax.swing.JButton hSave;
    private javax.swing.JTable hTableDetails;
    private javax.swing.JButton hUpdate;
    private javax.swing.JButton hView;
    private javax.swing.JPanel hosParent;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTable lDoctorsTableDetails;
    private javax.swing.JTextField lHeartRate;
    private javax.swing.JTextField lHeartRate1;
    private javax.swing.JTable lPatitentTableDetails;
    private javax.swing.JTextField lTimeStamp;
    private javax.swing.JTextField lTimeStamp1;
    private javax.swing.JTextField lWeight;
    private javax.swing.JTextField lWeight1;
    private javax.swing.JPanel loginPanel;
    private javax.swing.JPanel mAccounts;
    private javax.swing.JButton mDelete;
    private javax.swing.JPasswordField mPassword;
    private javax.swing.JComboBox<String> mRoles;
    private javax.swing.JButton mSave;
    private javax.swing.JTable mTableDetails;
    private javax.swing.JButton mUpdate;
    private javax.swing.JTextField mUsername;
    private javax.swing.JTextField pBloodPressure;
    private javax.swing.JComboBox<String> pBloodType;
    private com.toedter.calendar.JDateChooser pDob;
    private javax.swing.JComboBox<String> pGender;
    private javax.swing.JTextField pName;
    private javax.swing.JTextField pPatientId;
    private javax.swing.JTable pTableDetails;
    private javax.swing.JButton pUpdate;
    private javax.swing.JButton pUpdate1;
    private javax.swing.JButton pVBack;
    private javax.swing.JTextField pVBloodPressure;
    private javax.swing.JComboBox<String> pVBloodType;
    private javax.swing.JButton pVDelete;
    private com.toedter.calendar.JDateChooser pVDob;
    private javax.swing.JComboBox<String> pVGender;
    private javax.swing.JTextField pVName;
    private javax.swing.JTextField pVPatientId;
    private javax.swing.JButton pVUpdate;
    private javax.swing.JButton pView;
    private javax.swing.JPasswordField password;
    private javax.swing.JTextField rAddress;
    private javax.swing.JButton rBack;
    private javax.swing.JTextField rCities;
    private com.toedter.calendar.JDateChooser rDob;
    private javax.swing.JComboBox<String> rGender;
    private javax.swing.JTextField rHouse;
    private javax.swing.JTextField rName;
    private javax.swing.JTextField rPassword;
    private javax.swing.JTextField rPersonId;
    private javax.swing.JComboBox<String> rRoles;
    private javax.swing.JTextField rStates;
    private javax.swing.JTextField rUsername;
    private javax.swing.JTextField rZipCode;
    private javax.swing.JPanel registerPanel;
    private javax.swing.JButton roleRegister;
    private javax.swing.JPanel rolesPanel;
    private javax.swing.JButton saveRegister;
    private javax.swing.JButton updateRegister;
    private javax.swing.JTextField userName;
    private javax.swing.JTable vDocTableDetails;
    private javax.swing.JTextField vHospitalId;
    private javax.swing.JTextField vHospitalName;
    private javax.swing.JTable vPatientTableDetails;
    private javax.swing.JButton viewPerson;
    // End of variables declaration//GEN-END:variables

}
